"""
Django settings for ReefTracker project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from dotenv import load_dotenv, find_dotenv
from pathlib import Path
import os
import dj_database_url


# Build paths inside the project like: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(find_dotenv(filename=".env", usecwd=True))

# ---------- Helpers ----------


def env_list(name: str, default: str = ""):
    """Read a comma-separated env var into a list."""
    return [x.strip() for x in os.environ.get(name, default).split(",") if x.strip()]


# ---------- Security / Debug ----------
# Keep the real key in environment (Codespaces/Render). Fallback is dev-only.
SECRET_KEY = os.environ.get("SECRET_KEY", "dev-secret-key")

# DEBUG=1 (true) / DEBUG=0 (false)
DEBUG = os.environ.get("DEBUG", "0") in {"1", "true", "True"}

# Allow localhost & Codespaces preview by default; override via env when deploying.
ALLOWED_HOSTS = env_list(
    "ALLOWED_HOSTS",
    "localhost,127.0.0.1,0.0.0.0,.app.github.dev",
)

# Required for POST/CSRF on those hosts (Codespaces + local)
CSRF_TRUSTED_ORIGINS = env_list(
    "CSRF_TRUSTED_ORIGINS",
    "http://localhost:8000,http://127.0.0.1:8000,https://*.app.github.dev",
)

# ---------- Application definition ----------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapp",
    "crispy_forms",
    "crispy_bootstrap5",
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ReefTracker.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ReefTracker.wsgi.application"

# ---------- Database ----------
# Use DATABASE_URL from env. Fall back to SQLite for local dev if missing.
# Only require SSL for PostgreSQL databases to avoid passing unsupported params to SQLite.
_default_db_url = f"sqlite:///{BASE_DIR / 'db.sqlite3'}"
_env_db_url = os.environ.get("DATABASE_URL", _default_db_url)
_ssl_required = _env_db_url.startswith("postgres://") or _env_db_url.startswith("postgresql://")

DATABASES = {
    "default": dj_database_url.config(
        default=_default_db_url,
        conn_max_age=600,
        ssl_require=_ssl_required,
    )
}

# If behind a proxy that terminates SSL (Render), honor X-Forwarded-Proto
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# ---------- Password validation ----------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ---------- Internationalization ----------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ---------- Static files ----------
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATIC_URL = "/static/"
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
if not DEBUG:
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# ---------- Defaults ----------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
LOGIN_REDIRECT_URL = "/home/"
LOGOUT_REDIRECT_URL = "/login/"
